# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bnrXekDR8JbSTm95A3u4JDsp6Fu5GyGq
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
from google.colab import files
import pandas as pd

# Upload file
uploaded = files.upload()  # This opens a file selection dialog

# Get the filename dynamically
filename = next(iter(uploaded))

# Read the CSV file
df = pd.read_csv(filename)

# Display the first 5 rows
print(df.head())

# Split data into features (X) and labels (y)
X = df.drop(columns=["target"])  # Features
y = df["target"]  # Target (1 = disease, 0 = no disease)

# Split into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train Random Forest Model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions
y_pred_rf = rf_model.predict(X_test)

# Evaluate performance
print("Random Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print("Classification Report:\n", classification_report(y_test, y_pred_rf))

# Build Neural Network Model
model = Sequential([
    Dense(16, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(8, activation='relu'),
    Dense(1, activation='sigmoid')  # Output layer (binary classification)
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=16, validation_data=(X_test, y_test))

# Evaluate on test set
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Neural Network Test Accuracy: {accuracy:.4f}")

# Select a random patient
sample_index = np.random.randint(0, len(X_test))
sample_data = X_test[sample_index].reshape(1, -1)

# Predict using Random Forest
rf_prediction = rf_model.predict(sample_data)

# Predict using Neural Network
nn_prediction = model.predict(sample_data)

# Print predictions
print("Random Forest Prediction:", "Heart Disease" if rf_prediction[0] == 1 else "No Heart Disease")
print("Neural Network Prediction:", "Heart Disease" if nn_prediction[0][0] > 0.5 else "No Heart Disease")